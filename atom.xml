<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Teach-C</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://Teach-C.github.io/"/>
  <updated>2017-04-29T15:05:56.083Z</updated>
  <id>https://Teach-C.github.io/</id>
  
  <author>
    <name>Teach-C</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>计算机 -- 只懂得0和1的机器</title>
    <link href="https://Teach-C.github.io/cj23eic9a0006k0s6vakxnilf/1-1-computer-the-machine-only-knows-0-and-1/"/>
    <id>https://Teach-C.github.io/cj23eic9a0006k0s6vakxnilf/1-1-computer-the-machine-only-knows-0-and-1/</id>
    <published>2017-04-29T09:39:26.000Z</published>
    <updated>2017-04-29T15:05:56.083Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp; 终于，经过几天的调试修改，我解决了章节页面的排序问题，可以进行进一步的讲解了，本节我将和大家探讨关于计算机的一些基本的问题，废话不多说，Let’s go !</p>
<h1 id="什么是计算机？"><a href="#什么是计算机？" class="headerlink" title="什么是计算机？"></a>什么是计算机？</h1><p>&emsp; 计算机技术已经进入了我们生活的方方面面，我们现代生活的一切都是建立在计算机技术衍生的设备之上的：从早上叫醒你的电子闹钟或者手机，再到上学上班路上的车载设备，或是签到时候的打卡机，或是你上班上课时偷偷打游戏，聊天，刷新社交媒体的电脑或者手机，再到你正在浏览这个项目的设备。</p>
<p>&emsp; 那么到底<strong>什么是计算机呢？</strong></p>
<a id="more"></a>
<p>&emsp; 由于计算机是舶来品，我们要想更直接的了解它，就是通过它诞生的地区的语言，在英语中计算机写作 <code>computer</code> ，英文词典对computer 的解释是：</p>
<blockquote>
<p><strong>an electronic device for storing and processing data, typically in binary form, according to instructions given to it in a variable program.</strong></p>
</blockquote>
<p>大意就是一种以<code>二进制</code>形式根据<code>可变程序</code>的<code>指令</code> <code>存储和处理数据</code>的一种电子设备。</p>
<p>&emsp; 这么一解释，是不是一下子就懂了呢，都是汉字，一看就懂，是吧～</p>
<p>&emsp; 那……..<strong>你给我用自己的语言复述一下吧.</strong>…..</p>
<p>&emsp; ……………………………………….</p>
<p>&emsp; <strong>说啊，你倒是说啊！！！行了行了，我知道你没看明白，能看明白就怪了~</strong></p>
<p>&emsp; 怎么了你还<strong>委屈上了</strong>？？</p>
<p>&emsp; 行了，行了，<strong>别委屈了</strong>，我给你讲<strong>还不行么</strong>…….</p>
<h2 id="只懂-0-和-1-的机器"><a href="#只懂-0-和-1-的机器" class="headerlink" title="只懂 0 和 1 的机器"></a>只懂 0 和 1 的机器</h2><p>&emsp; 上面的提到了计算机以二进制形式工作，那么什么是二进制呢？</p>
<p>&emsp; 简单来说，二进制就是一种计数方法，就和我们平常用的十进制类似。</p>
<p>&emsp; 在十进制中，我们有0 - 9 这十个基本数字，计数的时候从 1 开始，每满 10 就向前进一位。同理，二进制只有 0 和 1这两个数字，每满 2 就向前进一位。</p>
<p>&emsp; 可能你听到这里还是一头雾水，所以我要和大家闲聊一会了，说一说我学习二进制的时候：在我刚开始接触电脑的时候是不了解二进制的，甚至在我开始学习 VB 的时候，我也不是很理解二进制，当然，我现在也懒的算二进制。实际上，在大多数情况下，我们是不需要自己计算二进制的，因为我们有计算器这个好帮手，所以在这里我也只是给大家讲讲基本的二进制知识，<strong>我个人觉得</strong>，没必要在练习进制换算之间浪费太多时间。当然<strong>这只代表我个人观点</strong>。</p>
<p>&emsp; 好了我们言归正传，继续说一说二进制，下面我将通过几个换算给大家展示二进制的原理：</p>
<p>&emsp; 比如，我们在十进制中用 0 来表示没有某种东西，在二进制中我们也用 0 。当我们用十进制表示 1 的时候，1 小于 2，所以我们不需要考虑进位的事情，所以十进制的 1 在二进制中还是 1 （要注意的是，这里的 0 和 1 无论是二进制还是十进制中，都只是表示 0 个和 1 个，而不是 101 ， 12013这样的数在某一位的 0 和 1 ）。当我们在十进制中表示 2 的时候，二进制中已经满 2 了，要进位了，（这很容易理解：二进制中 1 是某一位的最大值，超过1就要进位，就好比十进制中 9 是某一位的最大值一样，在十进制中，我们也没有单个数字表示”十“）所以十进制的 2 在二进制中表示为 10 （这并不读作”十“，而是”一“ ”零“），由此十进制的 3 在二进制中就是 11 ，十进制中的 4 在二进制中就是 100 了，十进制的 5 对应二进制 101 ，6 对应 110 ， 7 对应 111 ….依次类推。</p>
<p>&emsp; 到这里，你就已经学会了二进制的基本原理了，你已经可以很低效率，但是很准确的计算任何一个十进制正整数对应的二进制数了，你可能会想问如何用二进制表示十进制数的正负以及小数部分，这些我在本节就不写了，这并不会影响继续的阅读，如果在以后需要，比如用二进制表示正负，我将会继续讲解，我不想因为过于深入复杂的介绍二进制而影响大家的阅读兴趣。</p>
<p>&emsp; 另外还有一种简单的十进制和二进制的转换方法，大家可以参考 <a href="http://zh.wikihow.com/%E4%BB%8E%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%E4%B8%BA%E4%BA%8C%E8%BF%9B%E5%88%B6" target="_blank" rel="external">如何从十进制转换为二进制</a>  （PS：这篇文章是图文解释的哦～笑。。）</p>
<p>&emsp; 讲了二进制，你可能会问为什么计算机会用二进制呢？和我们人类一样用十进制不好么？</p>
<p>&emsp; 当然不好，用了十进制，计算机就会和人类一样，然后学会人类的一切，拥有自我意识，觉得人类是多余的，然后……..所以为了抑制计算机的发展人们用二进制禁锢了计算机的能力，化解了危机。好了，好了，我编不下去了。。。</p>
<p>&emsp; 实际上，在计算机诞生之前的机械传动计算装置采用的十进制形式工作，这种装置会有齿轮等装置来表示0 - 9 ，通过传动装置进行运算和进位，由于年代离我们实在是太久远了，我也不是很了解，所以我只是简单的说一下。</p>
<p>&emsp; 说回计算机，计算机之所以使用二进制，是因为这样很方便对数据进行存储和处理，很多自然界的信号(也就是所谓的模拟信号)，都可以很好的以二进制的形式转换为计算机内部的数字信号，比如电位的高低，运动的有无，就可以用 0 和 1 来描述，高电位用 1 ，低电位用 0 ，运动用 1 ，静止为 0（当然也可以正好相反）。从上面的二进制原理中，我们知道二进制是一种计数方法，所以二进制也可以进行四则运算，而计算机中主要进行运算操作的晶体管，其原型的电子管，电子管只有导通和截止两个状态，正好对应了二进制中的 0 和 1  ，然后通过各种各样的逻辑电路，就可以实现各种各样的用于各种各样计算的电路（这就涉及微机原理的内容了，本项目不讨论）。</p>
<p>&emsp;  上面说了计算机用二进制进行运算，那么计算机是如何通过二进制进行存储的呢？我们从最常用的存储介质：<strong>磁盘</strong>说起吧。磁盘，顾名思义，就是用磁效应进行存储的类似圆盘一样的东西（实际上磁盘的外观都是方形的，并不是圆形的，内部存储数据的盘片才是圆形的），常见的磁盘有：硬盘，软盘。</p>
<p>&emsp; 硬盘可能大家会见过，软盘因为年代久远，现在很少能见到了，至于硬盘的细节，可以参看<a href="https://zh.wikipedia.org/wiki/%E7%A1%AC%E7%9B%98" target="_blank" rel="external">维基百科</a>，硬盘内部有磁颗粒，我们知道磁极分为N - S ，正好也对应二进制的 0 或 1 ，所以，把数据写入磁盘就是将磁性物质磁化成我们想要的磁极排列情况（因为磁性物质是立式放置的所以只会有一个磁级在上面），读取的时候就是读出磁极的顺序。</p>
<p>&emsp; 至于光盘是通过盘面的凹凸性来存储的，固态存储设备（固态硬盘，U盘，SD卡等）存储原理稍许不同，但也只是用两种状态来表示数据。</p>
<p>&emsp; 到此，二进制与计算机的关系就介绍完了，如果大家有什么问题或者发现了什么错误，可以在下面评论区留言哦！</p>
<h2 id="任劳任怨的傻机器"><a href="#任劳任怨的傻机器" class="headerlink" title="任劳任怨的傻机器"></a>任劳任怨的傻机器</h2><p>&emsp; 虽然我们现在的计算机越来越智能，但计算机并不聪明的，它们很傻，聪明的是人。还记得最开始那句计算机的解释么？我们还差最后一块拼图就解开计算机的奥秘了！</p>
<p>&emsp; 上面写了什么？我就知道你忘的差不多了，我带你回忆一下吧！上面说，计算机是根据<code>可变程序</code>的<code>指令</code> 来进行数据的存储和处理的，其实我觉得这句话我翻译的并不好，<strong>可变程序</strong>听起来不仅不顺嘴，而且生硬还晦涩难懂，我们可以理解成各种各样的程序，或者单纯的程序就好了，因为程序就是各种各样的，我们的闹钟程序，天气预报程序，或者你现在浏览这个项目的浏览器程序，都是程序。</p>
<p>&emsp; 那么什么是程序呢，程序可以抽象成由为了完成某些工作的指令的有规律的组合。那么问题来了，什么是指令呢？指令就是本身计算机中设计好了的某些操作（具体的解释是<strong>由指令集架构定义的单个的CPU操作</strong>，但是我们还没介绍CPU，所以我只能形象化的，稍微偏离本意的描述这个概念了），你可以这样理解：</p>
<blockquote>
<p>我们写了一个计算3X + 2Y的程序，这个程序是可以计算3X + 2Y 的，这是程序，程序执行需要执行3 <em> X 和 2 </em> Y 的乘法运算指令，还需要执行 3 <em> X 与 2 </em> Y 的结果的求和指令.</p>
</blockquote>
<p>&emsp; 从上面的例子中，你会发现，计算机计算的方式和我们没有多大区别（不考虑这之间需要十进制和二进制转换之类的问题），也需要按照计算符号的优先级进行运算，然后得出结果，事实上也就是这样，比如说你要写一个找出一组数中最大数的程序，计算机只会一个数一个数的比较，而不是它一下就知道最大值或最小值，之所以会有这样的错觉是因为计算机能很快的处理这些数据，对于我们来说也就是一瞬间的问题。</p>
<p>&emsp; 这也就是为什么计算机是任劳任怨的傻机器的原因，它只会按照设计好的程序，去执行人类给他们的指令，而不会自己主观的去执行什么。它也不会投机取巧，也许你以后会发现自己写的代码被自动优化了，那也不是计算机自发的，而是编译器进行的优化（对，编译器也是后面要讲的内容，自行pass掉。。。），编译器的优化也是人为设计好的。</p>
<p>&emsp; 但不得不说，虽然他们傻乎乎的，但是他们很可信！（至少比人可信。）</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>&emsp; 本篇并没有讲CPU 内存 这些概念，而是让大家在一个适中的层次了解了计算机的基本工作原理，也讲了基本二进制的原理，也稍不恰当的解释了程序和指令，这两者与数据的关系，我会在以后的章节细讲，这样讲只是为了方便理解。</p>
<p>&emsp; 在下一节，我们就要实实在在的接触软硬件了！有没有觉得很激动？本来我计划计算机基础就写一节的，可是一写就停不下来，看来需要两节，当然如果我觉得下一节内容较多，不易于一节接受，我可能会分成更多节，基础很重要，我为了补全这些基础，苦苦摸索了好多年，我不希望大家和我一样，在无知的痛苦和黑暗中苦苦的寻找出路，所以我将我掌握的知识尽可能多的写出来。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp; 终于，经过几天的调试修改，我解决了章节页面的排序问题，可以进行进一步的讲解了，本节我将和大家探讨关于计算机的一些基本的问题，废话不多说，Let’s go !&lt;/p&gt;
&lt;h1 id=&quot;什么是计算机？&quot;&gt;&lt;a href=&quot;#什么是计算机？&quot; class=&quot;headerlink&quot; title=&quot;什么是计算机？&quot;&gt;&lt;/a&gt;什么是计算机？&lt;/h1&gt;&lt;p&gt;&amp;emsp; 计算机技术已经进入了我们生活的方方面面，我们现代生活的一切都是建立在计算机技术衍生的设备之上的：从早上叫醒你的电子闹钟或者手机，再到上学上班路上的车载设备，或是签到时候的打卡机，或是你上班上课时偷偷打游戏，聊天，刷新社交媒体的电脑或者手机，再到你正在浏览这个项目的设备。&lt;/p&gt;
&lt;p&gt;&amp;emsp; 那么到底&lt;strong&gt;什么是计算机呢？&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="1 Chapter" scheme="https://Teach-C.github.io/categories/1-Chapter/"/>
    
    
      <category term="计算机" scheme="https://Teach-C.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="计算机基础" scheme="https://Teach-C.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="二进制" scheme="https://Teach-C.github.io/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    
      <category term="计算机原理" scheme="https://Teach-C.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%90%86/"/>
    
      <category term="程序" scheme="https://Teach-C.github.io/tags/%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="指令" scheme="https://Teach-C.github.io/tags/%E6%8C%87%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>本章前言</title>
    <link href="https://Teach-C.github.io/cj23eic8m0002k0s6jhrb8dpp/1-0-things-before-start/"/>
    <id>https://Teach-C.github.io/cj23eic8m0002k0s6jhrb8dpp/1-0-things-before-start/</id>
    <published>2017-04-26T07:13:04.000Z</published>
    <updated>2017-04-29T14:28:39.632Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;  从这一篇开始，我们就要进行C语言的学习了，在开始之前，我想拿出一章（或者加上附录）来讲一讲编程之外的内容，让大家在开始学习之前对计算机和程序有一些认识。</p>
<p>&emsp;  什么？这么快就进入学习状态让你很不适应？哦，不要担心，这一章我要慢悠悠的和大家谈一些基本的概念，并不涉及太多编程的内容，所以深呼吸～放轻松～</p>
<p>&emsp; 喂，别睡着了诶！！！<br><a id="more"></a></p>
<h1 id="说在前面的话"><a href="#说在前面的话" class="headerlink" title="说在前面的话"></a>说在前面的话</h1><p>&emsp;  在这里说明一下，我发起这个项目并不是单纯给大学生（也就是我的同学们）提供一个学习C语言的平台，而是希望更多人能够接触计算机技术和计算机编程，我希望我写的东西可以让有一些计算机基础的人都能学会C语言。</p>
<p>&emsp;  <strong>为什么说是有一些计算机基础，而不是说从0开始呢？</strong></p>
<p>&emsp; 因为我想说的严谨一点，我没办法从0开始教会一个人用电脑，再带他认识电脑，再教会C语言，况且关注这个项目的人都是会使用电脑的，可能你是用电脑写文档，做表格，做PPT，或者拿它来炒股，打游戏。总之，你已经学会基本的电脑操作，我不需要教你单击双击，左键右键，大小写切换这些东西。。。</p>
<p>&emsp; 当然这个项目的目标不只是教会大家C语言，这太俗气了，毫不夸张的说，硬要一个根本没有接触过计算机或者说任何电子设备的人学C语言，他也可以在纸上写出正确的代码，所以说教会基本的C语言并不是这个项目的目标，我希望通过这个项目，以C为出发点，让大家能对计算机技术的探索感兴趣。</p>
<p>&emsp; 同时C是一个很好的入门语言（虽然我本人更倾向于<code>Python</code>或者<code>HTML</code>做入门语言），学会基本的C之后，可以在硬件上开发类似<code>arduino</code>的设备来进行一些发明创造(实际上arduino主要开发语言是<code>C++</code>，<code>C和C++的区别</code>本章会讨论)，软件上可以去学习C++以及其他的编程语言，或者去进行算法的研究，也或者去开发高性能的数据库，服务端，或者系统底层。（我就是说说，我只会调试或者配置上面说的这几个看起来高达上的东西。。）</p>
<p>&emsp;  当然学C的意义不仅在于此，虽然不同的语言之间有很大区别，但是基本的思想还是一样的，（比如说都会有<code>变量</code>，<code>函数</code>这些概念，你现在可能并不知道编程语言中的变量和函数是什么意思，忘了它吧，继续往下看！）所以学会C也可以轻松学习别的编程语言。</p>
<h2 id="关于本章"><a href="#关于本章" class="headerlink" title="关于本章"></a>关于本章</h2><p>&emsp; 关于这个章节，我主要想讲一讲计算机的基础知识，操作系统，C的编程思想，编辑器，基本的编译原理和编译器，还有IDE这些内容。</p>
<p>&emsp; 当然，还有很多同学好奇的C和C++的区别。</p>
<h2 id="你可能想问的"><a href="#你可能想问的" class="headerlink" title="你可能想问的"></a>你可能想问的</h2><h3 id="机械键盘-or-Not-？"><a href="#机械键盘-or-Not-？" class="headerlink" title="机械键盘 or Not ？"></a>机械键盘 <strong>or Not</strong> ？</h3><p>&emsp; 之前说过不需要准备什么工具：智商上线的脑子和一台能正常运行的电脑就可以了，这里可能会有些朋友问我，要不要买一个机械键盘来敲代码，说是很多电影或者现实生活中的大牛都会有机械键盘巴拉巴拉……</p>
<p>&emsp; 这个问题：<strong>因人而异</strong>。</p>
<p>&emsp;  我家里的第一台电脑用的是机械键盘，我用了差不多有十年，它伴随我度过了幼儿园，小学，直到初中它才寿终正寝，后来家里也没买过太贵的键盘，都是普通的巧克力键盘，再到后来的笔记本的浮萍键盘，我觉得都差不多，用着用着，掌握了键间距，就习惯了，我现在最习惯用的是chromebook的浮萍键盘，类似macbook的那种，不过我热爱打游戏的室友觉得机械键盘用着很爽。</p>
<p>&emsp; 所以说，这个事情并没有确切的答案，找一个你用起来最顺手的键盘就好了。</p>
<p>&emsp; 不过话说回来，目前我们的编码水平（包括将来项目结束），不至于因为键盘制约编码效率，当然选用的键盘也不能太差，我们学校机房有一个屋子里面的键盘，那手感就像上面沾了X一样。<br>所以适中就好，比如（下面的品牌包含但不限于） 某技 或者 某飞燕的百元左右的键盘或者键鼠套装都是不错的选择。</p>
<h3 id="我需要什么配置的电脑？"><a href="#我需要什么配置的电脑？" class="headerlink" title="我需要什么配置的电脑？"></a>我需要什么配置的电脑？</h3><p>&emsp; 我无数次听到我的朋友跟我说，“<strong>我电脑1T内存</strong>”，或者懂一点的说“<strong>我手机128G内存，比电脑都大</strong>” 更有甚者说”<strong>我电脑500G硬存</strong>“！！！</p>
<p>&emsp; 每当我听到这样的话的时候我都会怀疑自己是不是没有跟上时代的潮流。虽然内存以后能够达到1T，（目前部分工作站和服务器的内存已经可以达到128G，所以我是不会像以前人写书的时候说”我们当时的硬盘容量达到10M，这已经很大了“这样的话的。）但是他们所说的内存并不是真正的“内存”，也就因为这样，我要在这一章里面介绍基础的计算机知识，等我介绍完这些，大家对计算机有一些基本的概念，就知道这个答案了。</p>
<p>&emsp; 所以不要急着去电脑城配台机子，况且电脑城鱼龙混杂。。。你懂得。。。</p>
<h3 id="为什么图这么少-？"><a href="#为什么图这么少-？" class="headerlink" title="为什么图这么少 ？"></a>为什么图这么少 ？</h3><p>&emsp; 这是经过本人深思熟虑的，首先因为我懒的给这个项目备案，所以无论是主站还是映像站都是在天朝境外的服务器，所以过多的图片会增加加载速度，况且本身加载图片就会花费很多时间，所以没有插图必要的章节，就不插图。</p>
<p>&emsp; 而且我还考虑了一个因素，因为这个项目本身不是一个纯粹的教学项目，你可以像看小说，看故事或者看段子一样的享受这个项目，而这些作品里面几乎都是没有图的，你们不也是看得津津有味嘛！！！（说白了就是懒。）</p>
<p>&emsp; 不过，在必要的地方，在表格或者代码块无法清楚表达我的意思的时候，我还是会加入图片的！！！</p>
<h3 id="这个项目运营成本多大-？"><a href="#这个项目运营成本多大-？" class="headerlink" title="这个项目运营成本多大 ？"></a>这个项目运营成本多大 ？</h3><p>&emsp; 目前这个项目托管在<a href="https://github.com/" target="_blank" rel="external">Github</a>上，不过Github在米国，天朝访问比较慢，也不稳定，所以增加了岛国映像站，这两个站点是几乎同步更新的，所以费用主要出在服务器上，同时，如果可以，我希望能换一个好的域名。</p>
<p>&emsp; 还有需要说明的一点，<strong>我不会在项目中投放任何广告</strong>，如果有弹窗或者浮窗广告那是网络流量被你的ISP劫持了，所以我在考虑要不要使用HTTPS，这样就需要证书的费用了。目前这个还在考虑中。。。</p>
<p>&emsp; 这些能用金钱来衡量的开销并不是很多，主要还是我需要挤出时间来完成这个项目，这个学期几乎天天满课，我一般都在晚课结束到睡觉前去做这个项目，如果你觉得我的付出值得你奖励一下，就请在下面打赏哦～</p>
<h2 id="最后说两句"><a href="#最后说两句" class="headerlink" title="最后说两句"></a>最后说两句</h2><p>&emsp; 从下节开始我就要给大家介绍计算机方面的知识了，不知道到现在大家看得怎么样，有没有感觉亚历山大？</p>
<p>&emsp; 拜托！大家都是成年人了，不这么扭扭捏捏的好不好？这电脑多好玩啊！（当然没有和对象出去好玩。。。）电脑并不是什么碰不得的稀罕玩意，计算机被发明出来就是为了方便人们的生活的（虽然最开始是为了解决复杂繁琐的数学问题的），所以说计算机已经发展的很人性化了，在这个科技高速发展的时代，不接触计算机技术，那还有啥意思？</p>
<p>&emsp; 所以说，不要一想到电脑和编程就头疼，随着这个项目的进行，你会发现其实计算机并不是那么复杂，只不过是你以前打开的方式不对罢了～</p>
<p>&emsp; 马上要开始探险了！让你的智商上线把！ </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;  从这一篇开始，我们就要进行C语言的学习了，在开始之前，我想拿出一章（或者加上附录）来讲一讲编程之外的内容，让大家在开始学习之前对计算机和程序有一些认识。&lt;/p&gt;
&lt;p&gt;&amp;emsp;  什么？这么快就进入学习状态让你很不适应？哦，不要担心，这一章我要慢悠悠的和大家谈一些基本的概念，并不涉及太多编程的内容，所以深呼吸～放轻松～&lt;/p&gt;
&lt;p&gt;&amp;emsp; 喂，别睡着了诶！！！&lt;br&gt;
    
    </summary>
    
      <category term="1 Chapter" scheme="https://Teach-C.github.io/categories/1-Chapter/"/>
    
    
      <category term="前言" scheme="https://Teach-C.github.io/tags/%E5%89%8D%E8%A8%80/"/>
    
      <category term="常见问题" scheme="https://Teach-C.github.io/tags/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>序言</title>
    <link href="https://Teach-C.github.io/cj23eic7p0000k0s600axh61d/0-Hello-World/"/>
    <id>https://Teach-C.github.io/cj23eic7p0000k0s600axh61d/0-Hello-World/</id>
    <published>2017-04-24T05:04:40.000Z</published>
    <updated>2017-04-29T14:28:39.632Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>&emsp; 很久之前就有写一本书这样的想法，但是一直没有充足的时间，而且自己也没有什么拿得出手的干货。怕写出来被人笑话，所以这个想法就被搁置了。<br>&emsp; 直到这个学期（2017年3月），学校开设了C语言课程，采用的是谭老师的教材（为了防止被喷我就不写全名了），这个教材最大的好处就是看不懂，可能我和我的同学们都太愚钝了吧（笑）。<br>&emsp; 因为我相对懂一些C语言，经常有同学请教我C语言的问题，在这个过程中我发现这些知识，我讲解后能让他们很好的理解，这让我很高兴。但请教我的同学太多了，而且同学们对C的掌握程度参差不齐，我也没办法从头讲起，所以我想还是写一些东西吧，帮助大家的同时对自己也是一种锻炼吧！</p>
<a id="more"></a>
<h2 id="这个项目是干嘛的？"><a href="#这个项目是干嘛的？" class="headerlink" title="这个项目是干嘛的？"></a>这个项目是干嘛的？</h2><p>&emsp; 这是一个实验项目，意在给大家科普计算机技术和C语言，专业的图书可能很多人不想去看，因为它们看着太困了。<br>&emsp; 所以我想让这个项目既有我幽默风趣的特点，又可以不失内涵，又不违背科学技术的严谨性。</p>
<h2 id="这个项目讲什么？"><a href="#这个项目讲什么？" class="headerlink" title="这个项目讲什么？"></a>这个项目讲什么？</h2><p>&emsp; 开始这个项目之前，我花了很多时间思考这个问题，我要讲什么呢？纯粹的C语言？那我为什么不直接告诉大家去看C primer plus?这真的是一本很好的讲解C语言的书，我就是通过这本书学习C语言的。<br>&emsp; 不过那本书太专业了，好的技术类图书好在对概念的解读的精细程度以及读者对内容的理解程度，但过于专业导致非计算机从业人员没有耐心读下去，很多人学习C语言是因为考试要考，这样的应试的原因。或者很多人根本不知道C语言是做什么的，为什么学C语言。<br>&emsp; 我不想单纯的去讲C语言，因为这是我的项目，我想怎么做就怎么做，我会先去讲一些基本的计算机概念，然后我可能会给大家讲一讲Linux系统，vim nano文本编辑器，编译原理，gcc编译器这些学校甚至很多书上都不会讲的内容，我进行这个项目，不仅仅是为了能让我的同学们去更好的学习C语言，而是让更多人能了解，学习计算机技术，我更希望文科生，也可以接触计算机，C/C++语言，Arduino 这些不需要太多专业性知识的工具去拓展自己的创造力    。</p>
<h2 id="这个项目适用于哪些人？"><a href="#这个项目适用于哪些人？" class="headerlink" title="这个项目适用于哪些人？"></a>这个项目适用于哪些人？</h2><p>&emsp; 就像前面说到的我希望更多人甚至是文科生也能接触计算机技术，所以，我的项目适用于任何对计算机或者网络技术感兴趣的朋友，我个人觉得C/C++是很人性化的工具，只要有一点点英语的基础和耐心，是可以学有所成并且开发一些有意思的或者有助于生活的小程序的。<br>&emsp;有些人说学习编程需要很好的英语水平，数学能力。我觉得这个说法过于片面，我不完全否认，也不完全认同。<br>&emsp; 拿编程和英语来说，虽然我对几乎所有人说，英语这是太重要了！但是我要说，学习编程不要求太高的英语水平，大多数的资料都会有很准确的中文翻译。我学习英语是在我开始学习编程之后，因为一些原因，我大约小学五年级才开始学习英语，但在那之前我已经学习了LOGO VB DELPHI 以及批处理，并没有因为英语的问题受到阻挠。<br>&emsp; 而且，就我对计算机英语的认识，计算机英语本来就不是很难，基本的英语知识然后就是一些固定的动词比如（copy move delete command ….）然后就是各种各样的名词，随便找个翻译的工具就可以知道意思，我初中毕业之后，就开始上各种各样的国外技术网站，看一些英文的文档，并没有觉得太吃力。<br>&emsp; 再说说数学，数学一直是我的弱项，我高中的时候曾经一学期数学考25分。但这并不影响我编写程序，随着学习的深入，你会发现，很多完成复杂工作算法，已经被计算机科学家编写，我们只需要引用他们。<br>&emsp; 但话说回来，学好英语和数学，电路和线性代数对于程序的开发还是有很大好处的，学好英语意味着你可以更早的接触国外的新技术，数学更好的让你的代码有逻辑性，至于后两个，我以后会和大家探讨。</p>
<h2 id="多久更一次？"><a href="#多久更一次？" class="headerlink" title="多久更一次？"></a>多久更一次？</h2><p>&emsp; 这个问题问的好，我的项目，我说了算，那就看心情更吧～<br>&emsp; 开个玩笑，为了尽量减少错误，我每次更新都会自己阅读修改几遍，再给一些朋友看看预览，看看有没有写的不明白的地方，同时我大一下学期的课程比较多，所以没有固定的更新周期，我尽量做到每周一章吧。</p>
<h2 id="如何参与？"><a href="#如何参与？" class="headerlink" title="如何参与？"></a>如何参与？</h2><p>&emsp; 啊哈？听说你也想加入这个项目中来？先不要着急，万一以后写的不好了呢。<br>&emsp; 不过，可以简单的说一下，如果有朋友或者技术大牛对我这个小项目感兴趣，可以通过下面这几种方法参与。</p>
<ul>
<li><p>读</p>
<blockquote>
<p>&emsp; 这应该是参与最多的方式了，仔细认真的阅读我的文章，在下面的评论区(on progress)参与讨论，把问题或错误反馈我.</p>
</blockquote>
</li>
<li><p>打赏</p>
<blockquote>
<p>要是觉得我写的还不错或者对你有帮助，欢迎大家给我打赏哦，本项目支持 支付宝 比特币 支付方式.</p>
</blockquote>
</li>
<li><p>加入项目</p>
<blockquote>
<p>这个项目托管在<a href="https://github.com/Funarp/teachC" target="_blank" rel="external">github</a>上，所以，你懂得.</p>
</blockquote>
<h2 id="我需要准备什么？"><a href="#我需要准备什么？" class="headerlink" title="我需要准备什么？"></a>我需要准备什么？</h2><p>&emsp; 学习计算机技术实际上不需要太好的装备，我写这个项目就用了chromebook，当然最好是有个电脑了，能运行win7就可以了。虽然我不推荐在win下开发。。<br>&emsp; 工具是次要的，记得带上你的脑子，让你的智商上线！！！！！</p>
</li>
</ul>
<h2 id="说在最后的话"><a href="#说在最后的话" class="headerlink" title="说在最后的话"></a>说在最后的话</h2><p>&emsp; 首先这个项目是在hexo和github (pages)的支持上建立的，编写的设备是chromebook。</p>
<p>&emsp; 主题用了<a href="https://github.com/yscoder/hexo-theme-indigo" target="_blank" rel="external">yscoder的hexo-theme-indigo</a></p>
<p>&emsp; 另外很多人可能想问一个问题，那就是我有学C语言的必要么？</p>
<p>&emsp; 这个问题，对于大多数人是没有必要的，就像英语一样，可能很多人毕业了再也用不到了，如果你对计算机感兴趣，想更好的了解计算机更好的让计算机遵循你的意愿工作，C语言是个不错的选择，如果想入门计算机编程，我个人觉得python和html是不错的选择，不涉及太多计算机原理，又可以对编程有一定的了解。</p>
<p>&emsp; 当然如果你单纯因为我的文字写的有意思接着往下看，我也是很欢迎的！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h1&gt;&lt;p&gt;&amp;emsp; 很久之前就有写一本书这样的想法，但是一直没有充足的时间，而且自己也没有什么拿得出手的干货。怕写出来被人笑话，所以这个想法就被搁置了。&lt;br&gt;&amp;emsp; 直到这个学期（2017年3月），学校开设了C语言课程，采用的是谭老师的教材（为了防止被喷我就不写全名了），这个教材最大的好处就是看不懂，可能我和我的同学们都太愚钝了吧（笑）。&lt;br&gt;&amp;emsp; 因为我相对懂一些C语言，经常有同学请教我C语言的问题，在这个过程中我发现这些知识，我讲解后能让他们很好的理解，这让我很高兴。但请教我的同学太多了，而且同学们对C的掌握程度参差不齐，我也没办法从头讲起，所以我想还是写一些东西吧，帮助大家的同时对自己也是一种锻炼吧！&lt;/p&gt;
    
    </summary>
    
      <category term="0 Chapter" scheme="https://Teach-C.github.io/categories/0-Chapter/"/>
    
    
      <category term="Hello" scheme="https://Teach-C.github.io/tags/Hello/"/>
    
      <category term="Hello-World" scheme="https://Teach-C.github.io/tags/Hello-World/"/>
    
  </entry>
  
</feed>
